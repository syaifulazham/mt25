import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';
import * as jose from 'jose';

// Use the same cookie name and JWT secret as in auth.ts
const COOKIE_NAME = 'techlympics-auth';
const JWT_SECRET = process.env.JWT_SECRET || 'techlympics-2025-secret-key';

// Define the JWT payload type
interface JwtPayload {
  id: number;
  email: string;
  role: string;
  [key: string]: any;
}

// Edge-compatible JWT verification
async function verifyEdgeToken(token: string): Promise<JwtPayload | null> {
  if (!token) {
    return null;
  }
  
  try {
    const secret = new TextEncoder().encode(JWT_SECRET);
    const { payload } = await jose.jwtVerify(token, secret);
    return payload as JwtPayload;
  } catch (error) {
    console.error('Edge token verification error:', error);
    return null;
  }
}

export async function middleware(request: NextRequest) {
  // TEMPORARY DEVELOPMENT BYPASS
  // Remove this in production!
  console.log('TEMPORARY: Bypassing authentication for development');
  return NextResponse.next();
  
  // The code below is temporarily disabled
  /*
  const { pathname } = request.nextUrl;
  
  // Only apply middleware to /organizer routes that are not auth routes
  if (!pathname.startsWith('/organizer') || pathname.startsWith('/organizer/auth')) {
    return NextResponse.next();
  }
  
  console.log(`Checking auth for: ${pathname}`);
  
  // Get token from cookie
  const token = request.cookies.get(COOKIE_NAME)?.value;
  console.log(`Auth cookie exists: ${!!token}`);
  
  // If no token, redirect to login
  if (!token) {
    console.log('No auth token found, redirecting to login');
    const url = new URL('/organizer/auth/login', request.url);
    url.searchParams.set('redirect', pathname);
    return NextResponse.redirect(url);
  }
  
  try {
    // Verify token using Edge-compatible method
    const decoded = await verifyEdgeToken(token);
    
    // If token is invalid or expired
    if (!decoded) {
      console.log('Invalid or expired token, redirecting to login');
      const url = new URL('/organizer/auth/login', request.url);
      url.searchParams.set('redirect', pathname);
      return NextResponse.redirect(url);
    }
    
    // Log successful verification
    console.log(`Token verified successfully for user role: ${decoded.role}`);
    
    // Check if the user has the required role (admin, operator, or viewer)
    if (!['ADMIN', 'OPERATOR', 'VIEWER'].includes(decoded.role)) {
      console.log('User does not have required role, redirecting to home');
      // Redirect to unauthorized page or home
      return NextResponse.redirect(new URL('/', request.url));
    }
    
    // User is authenticated and authorized
    return NextResponse.next();
  } catch (error) {
    console.error('Error in middleware:', error);
    // In case of any error, redirect to login
    const url = new URL('/organizer/auth/login', request.url);
    url.searchParams.set('redirect', pathname);
    return NextResponse.redirect(url);
  }
  */
}

// Configure the middleware to run only on specific paths
export const config = {
  matcher: [], // Temporarily disabled
};
