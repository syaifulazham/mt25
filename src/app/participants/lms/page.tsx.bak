"use client";

import { useState, useEffect } from "react";
import { useSession } from "next-auth/react";
import { useRouter } from "next/navigation";
import { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Loader2, CheckCircle, XCircle, ExternalLink, Eye, EyeOff } from "lucide-react";
import { toast } from "sonner";
import { useLanguage } from "@/lib/i18n/language-context";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Form, FormControl, FormDescription, FormField, FormItem, FormLabel } from "@/components/ui/form";
import { useForm } from "react-hook-form";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";

interface MoodleUserStatus {
  exists: boolean;
  username?: string;
  id?: number;
}

interface UserDetails {
  email: string;
  firstname: string;
  lastname: string;
  authMethod: "manual" | "oauth2";
  password?: string;
}

const passwordSchema = z.object({
  password: z.string().min(8, "Password must be at least 8 characters").nonempty("Password is required"),
  confirmPassword: z.string().nonempty("Password confirmation is required")
}).refine(data => data.password === data.confirmPassword, {
  message: "Passwords don't match",
  path: ["confirmPassword"]
});

export default function LMSPage() {
  const { data: session, status } = useSession();
  const router = useRouter();
  const { t } = useLanguage();
  
  const [loading, setLoading] = useState(true);
  const [registering, setRegistering] = useState(false);
  const [userStatus, setUserStatus] = useState<MoodleUserStatus | null>(null);
  const [showPreview, setShowPreview] = useState(false);
  const [userDetails, setUserDetails] = useState<UserDetails | null>(null);
  const [showPassword, setShowPassword] = useState(false);
  
  const form = useForm<z.infer<typeof passwordSchema>>({
    resolver: zodResolver(passwordSchema),
    defaultValues: {
      password: "",
      confirmPassword: ""
    }
  });
  
  useEffect(() => {
    if (status === "authenticated" && session?.user?.email) {
      checkLmsUser();
    } else if (status === "unauthenticated") {
      router.push('/participants/auth/login');
    }
  }, [session, status]);
  
  const checkLmsUser = async () => {
    try {
      setLoading(true);
      const response = await fetch(`/api/participants/lms/check-user?email=${session?.user?.email}`);
      
      if (!response.ok) {
        throw new Error("Failed to check LMS user status");
      }
      
      const data = await response.json();
      setUserStatus(data);
    } catch (error) {
      console.error("Error checking LMS user:", error);
      toast.error(t('lms.error_checking_user') || "Error checking LMS user status");
    } finally {
      setLoading(false);
    }
  };
  
  const prepareRegistration = async () => {
    try {
      // Get user details from session and split name
      const nameParts = (session?.user?.name || "").split(" ");
      const firstname = nameParts[0] || "";
      const lastname = nameParts.length > 1 ? nameParts.slice(1).join(" ") : "";
      
      // Always use manual auth for LMS registration
      const authMethod = "manual";
      
      setUserDetails({
        email: session?.user?.email || "",
        firstname,
        lastname,
        authMethod
      });
      
      // Reset password form with default values and clear errors
      form.reset({
        password: "",
        confirmPassword: ""
      });
      
      // Clear all form errors
      form.clearErrors();
      
      setShowPreview(true);
    } catch (error) {
      console.error("Error preparing registration:", error);
      toast.error("Error preparing registration details");
    }
  };
  
  const registerLmsUser = async (values: z.infer<typeof passwordSchema>) => {
    try {
      if (!userDetails) {
        toast.error("Registration details are missing");
        return;
      }
      
      // Password will be available in the values object, already validated by zod
      const password = values.password;
      
      setRegistering(true);
      const response = await fetch('/api/participants/lms/register-user', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          email: userDetails.email,
          name: `${userDetails.firstname} ${userDetails.lastname}`.trim(),
          password: password // will be undefined for oauth2 users
        }),
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || "Failed to register user in LMS");
      }
      
      const data = await response.json();
      setShowPreview(false);
      setUserStatus({ exists: true, username: data.username, id: data.id });
      toast.success(t('lms.registration_success') || "Successfully registered in LMS");
    } catch (error) {
      console.error("Error registering LMS user:", error);
      toast.error(t('lms.error_registering') || "Error registering in LMS");
    } finally {
      setRegistering(false);
    }
  };
  
  const openLmsLogin = () => {
    window.open(process.env.NEXT_PUBLIC_MOODLE_URL || 'https://bengkel.techlympics.my', '_blank');
  };
  
  if (status === "loading" || loading) {
    return (
      <div className="container mx-auto py-12 max-w-7xl">
        <Card>
          <CardContent className="pt-6 flex justify-center items-center min-h-[300px]">
            <div className="flex flex-col items-center">
              <Loader2 className="h-10 w-10 animate-spin text-primary mb-4" />
              <p className="text-lg font-medium">{t('lms.checking_status') || "Checking LMS status..."}</p>
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }
  
  return (
    <div className="container mx-auto py-6 max-w-7xl">
      <h1 className="text-2xl font-semibold mb-6">{t('lms.title') || "Learning Management System"}</h1>
      
      <Card>
        <CardHeader>
          <CardTitle>{t('lms.account_status') || "LMS Account Status"}</CardTitle>
          <CardDescription>
            {t('lms.description') || "Check your Learning Management System (LMS) account status"}
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="flex flex-col items-center py-6">
            {userStatus?.exists ? (
              <div className="flex flex-col items-center text-center">
                <CheckCircle className="h-16 w-16 text-green-500 mb-4" />
                <h2 className="text-xl font-medium mb-2">{t('lms.account_exists') || "LMS Account Exists"}</h2>
                <p className="text-gray-600 mb-6 max-w-md">
                  {t('lms.account_exists_message') || "You already have an account in our Learning Management System. You can access your courses and training materials by clicking the button below."}
                </p>
                <Button onClick={openLmsLogin} className="gap-2">
                  <ExternalLink className="h-4 w-4" />
                  {t('lms.login_to_lms') || "Login to LMS"}
                </Button>
              </div>
            ) : showPreview && userDetails ? (
              <div className="flex flex-col w-full max-w-lg mx-auto">
                <h2 className="text-xl font-medium mb-4 text-center">{t('lms.registration_preview') || "Registration Preview"}</h2>
                <p className="text-gray-600 mb-6 text-center">
                  {t('lms.preview_message') || "Please review the information that will be sent to the LMS system"}
                </p>
                
                <div className="grid gap-4 mb-6 border rounded-lg p-4 bg-gray-50">
                  <div>
                    <Label>{t('lms.email') || "Email"}</Label>
                    <div className="text-sm mt-1">{userDetails.email}</div>
                  </div>
                  
                  <div>
                    <Label>{t('lms.firstname') || "First Name"}</Label>
                    <div className="text-sm mt-1">{userDetails.firstname}</div>
                  </div>
                  
                  <div>
                    <Label>{t('lms.lastname') || "Last Name"}</Label>
                    <div className="text-sm mt-1">{userDetails.lastname}</div>
                  </div>
                  
                  <div>
                    <Label>{t('lms.auth_method') || "Authentication Method"}</Label>
                    <div className="text-sm mt-1">
                      {userDetails.authMethod === "oauth2" ? 
                        (t('lms.auth_google') || "Google Authentication") : 
                        (t('lms.auth_manual') || "Email/Password Authentication")}
                    </div>
                  </div>
                </div>
                
                {/* Always show password fields since we're using manual auth for all LMS accounts */}
                <form onSubmit={form.handleSubmit(registerLmsUser)} className="mb-6">
                        </button>
                      </div>
                      {form.formState.errors.password && (
                        <p className="text-sm text-red-500 mt-1">{form.formState.errors.password.message}</p>
                      )}
                    </div>
                    
                    <div>
                      <Label htmlFor="confirmPassword">{t('lms.confirm_password') || "Confirm Password"}</Label>
                      <Input
                        id="confirmPassword"
                        type={showPassword ? "text" : "password"}
                        {...form.register("confirmPassword")}
                      />
                      {form.formState.errors.confirmPassword && (
                        <p className="text-sm text-red-500 mt-1">{form.formState.errors.confirmPassword.message}</p>
                      )}
                    </div>
                  </div>
                  
                  <div className="flex gap-3 justify-center mt-6">
                    <Button 
                      type="button"
                      variant="outline" 
                      onClick={() => setShowPreview(false)}
                    >
                      {t('lms.back') || "Back"}
                    </Button>
                    
                    <Button 
                      type="submit"
                      disabled={registering}
                      className="gap-2"
                    >
                      {registering && <Loader2 className="h-4 w-4 animate-spin" />}
                      {t('lms.confirm_registration') || "Confirm Registration"}
                    </Button>
                  </div>
                </form>
              </div>
            ) : (
              <div className="flex flex-col items-center text-center">
                <XCircle className="h-16 w-16 text-amber-500 mb-4" />
                <h2 className="text-xl font-medium mb-2">{t('lms.no_account') || "No LMS Account Found"}</h2>
                <p className="text-gray-600 mb-6 max-w-md">
                  {t('lms.no_account_message') || "You don't have an account in our Learning Management System yet. Register now to access training materials and courses for Techlympics 2025."}
                </p>
                <Button 
                  onClick={prepareRegistration}
                  className="gap-2"
                >
                  {t('lms.register_in_lms') || "Register in LMS"}
                </Button>
              </div>
            )}
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
