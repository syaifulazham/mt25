generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model analytics {
  id        Int      @id @default(autoincrement())
  metric    String
  value     Float
  createdAt DateTime @default(now())
}

model announcement {
  id          Int      @id @default(autoincrement())
  title       String
  description String   @db.Text
  date        DateTime @default(now())
  icon        String?
  link        String?
  linkText    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  userId      Int
  user        user     @relation(fields: [userId], references: [id], map: "Announcement_userId_fkey")

  @@index([userId], map: "Announcement_userId_fkey")
}

model contest {
  id                 Int                       @id @default(autoincrement())
  name               String
  code               String                    @unique(map: "Contest_code_key")
  description        String?
  contestType        contest_contestType
  method             contest_method
  judgingMethod      contest_judgingMethod
  participation_mode contest_participationMode @default(INDIVIDUAL)
  startDate          DateTime
  endDate            DateTime
  accessibility      Boolean                   @default(false)
  minAge             Int? // Minimum age for contestants
  maxAge             Int? // Maximum age for contestants
  maxMembersPerTeam  Int?                      @default(1) // Maximum number of contestants per team
  createdAt          DateTime                  @default(now())
  updatedAt          DateTime                  @updatedAt
  themeId            Int?
  judgingTemplateId  Int?
  judgingtemplate    judgingtemplate?          @relation(fields: [judgingTemplateId], references: [id], map: "Contest_judgingTemplateId_fkey")
  theme              theme?                    @relation(fields: [themeId], references: [id], map: "Contest_themeId_fkey")
  eventId            Int? // New field for event relation
  event              event?                    @relation("eventToContest", fields: [eventId], references: [id], map: "Contest_eventId_fkey")
  contestants        contestParticipation[] // Direct relation to contestants through participation table
  judging            judging[]
  result             result[]
  submission         submission[]
  targetgroup        targetgroup[]             @relation("contesttotargetgroup")
  quizzes            quiz[] // Added relation to quizzes for QUIZ contest type
  teams              team[] // Teams participating in this contest
  eventcontests      eventcontest[] // New relation to eventcontest join table

  @@index([judgingTemplateId], map: "Contest_judgingTemplateId_fkey")
  @@index([themeId], map: "Contest_themeId_fkey")
  @@index([eventId], map: "Contest_eventId_fkey")
}

model independent {
  id          Int      @id @default(autoincrement())
  name        String
  address     String?
  town        String?
  postcode    String?
  stateId     Int
  institution String? // Optional field for affiliation
  type        String // PARENT or YOUTH_GROUP
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  state       state        @relation(fields: [stateId], references: [id])
  contingents contingent[]

  @@index([stateId])
}

model contingent {
  id                   Int                 @id @default(autoincrement())
  name                 String
  short_name           String? // Added short name field
  logoUrl              String? // Added logo URL field
  schoolId             Int?
  higherInstId         Int?
  independentId        Int? // New field for independent contingent reference
  contingentType       String              @default("SCHOOL") // SCHOOL, HIGHER_INST, INDEPENDENT
  createdAt            DateTime            @default(now())
  description          String?
  updatedAt            DateTime
  school               school?             @relation(fields: [schoolId], references: [id], map: "Contingent_schoolId_fkey")
  higherInstitution    higherinstitution?  @relation(fields: [higherInstId], references: [id])
  independent          independent?        @relation(fields: [independentId], references: [id])
  contestants          contestant[]
  teams                team[]
  participantId        Int?
  participant          user_participant?   @relation(fields: [participantId], references: [id])
  requests             contingentRequest[]
  managedByParticipant Boolean             @default(true)
  managers             contingentManager[] // New relation to contingent managers

  @@index([schoolId], map: "Contingent_schoolId_fkey")
  @@index([participantId])
  @@index([higherInstId])
  @@index([independentId])
}

model contestant {
  id           Int       @id @default(autoincrement())
  name         String
  ic           String?
  email        String?
  phoneNumber  String?
  gender       String
  birthdate    DateTime?
  age          Int?
  edu_level    String
  class_grade  String?
  class_name   String?
  hashcode     String?   @unique
  status       String    @default("ACTIVE")
  is_ppki      Boolean   @default(false)
  contingentId Int
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  createdById  Int?
  updatedById  Int?

  // Relations
  contingent   contingent             @relation(fields: [contingentId], references: [id], onDelete: Cascade)
  quizAttempts quiz_attempt[]
  teamMembers  teamMember[]
  submissions  submission[]
  contests     contestParticipation[]
}

model contestParticipation {
  id           Int      @id @default(autoincrement())
  contestId    Int
  contestantId Int
  registeredAt DateTime @default(now())
  status       String   @default("REGISTERED") // REGISTERED, CONFIRMED, WITHDRAWN
  notes        String?

  contest    contest    @relation(fields: [contestId], references: [id], onDelete: Cascade)
  contestant contestant @relation(fields: [contestantId], references: [id], onDelete: Cascade)

  @@unique([contestId, contestantId]) // Prevent duplicate registrations
  @@index([contestId])
  @@index([contestantId])
}

model event {
  id           Int        @id @default(autoincrement())
  name         String
  scopeArea    scope_area @default(OPEN)
  code         String     @unique(map: "Event_code_key")
  description  String?
  startDate    DateTime
  endDate      DateTime
  venue        String?
  address      String?
  city         String?
  addressState String?
  zoneId       Int?
  stateId      Int?
  latitude     Float?
  longitude    Float?
  isActive     Boolean    @default(true)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  // Relations
  contests     contest[]      @relation("eventToContest")
  eventcontests eventcontest[] // New relation to event contests
  zone         zone?          @relation(fields: [zoneId], references: [id])
  state        state?         @relation(fields: [stateId], references: [id])
}

// EventContest join table model
model eventcontest {
  id                   Int      @id @default(autoincrement())
  eventId              Int
  contestId            Int
  maxteampercontingent Int      @default(1)   // Maximum teams per contingent allowed for this contest in this event
  person_incharge      String?  // Person responsible for this contest in this event
  person_incharge_phone String? // Contact number for the person in charge
  isActive             Boolean  @default(true)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  // Relations
  event    event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  contest  contest  @relation(fields: [contestId], references: [id], onDelete: Cascade)
  teams    team[]   // Teams assigned to this event contest
  judges   eventcontestjudge[] // Judges assigned to this event contest
  eventcontestteam eventcontestteam[] // Relation to team registrations

  @@unique([eventId, contestId]) // Prevent duplicate contest assignments to events
  @@index([eventId])
  @@index([contestId])
}

model eventcontestteam {
  id             Int          @id @default(autoincrement())
  eventcontestId Int
  teamId         Int
  teamPriority   Int          @default(0) // Priority of the team in contingent
  status         String       @default("PENDING") // PENDING, APPROVED, REJECTED
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  // Relations
  eventcontest eventcontest @relation(fields: [eventcontestId], references: [id], onDelete: Cascade)
  team         team         @relation(fields: [teamId], references: [id], onDelete: Cascade)
}

// Event Contest Judge association model
model eventcontestjudge {
  id             Int          @id @default(autoincrement())
  eventcontestId Int
  userId         Int          // Judge user ID
  isChiefJudge   Boolean      @default(false) // Whether this judge is the chief judge
  notes          String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  // Relations
  eventcontest   eventcontest @relation(fields: [eventcontestId], references: [id], onDelete: Cascade)
  user           user         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventcontestId, userId]) // Prevent duplicate judge assignments
  @@index([eventcontestId])
  @@index([userId])
}

model higherinstitution {
  id           Int                @id @default(autoincrement())
  name         String
  code         String             @unique(map: "HigherInstitution_code_key")
  address      String?
  city         String?
  postcode     String?
  stateId      Int
  latitude     Float?
  longitude    Float?
  createdAt    DateTime           @default(now())
  state        state              @relation(fields: [stateId], references: [id], map: "HigherInstitution_stateId_fkey")
  participants user_participant[]
  contingents  contingent[]

  @@index([stateId], map: "HigherInstitution_stateId_fkey")
}

model judging {
  id                   Int                    @id @default(autoincrement())
  submissionId         Int
  score                Float
  feedback             String?
  contestId            Int
  judgingTime          DateTime               @default(now())
  judgeId              Int
  contest              contest                @relation(fields: [contestId], references: [id], map: "Judging_contestId_fkey")
  user                 user                   @relation(fields: [judgeId], references: [id], map: "Judging_judgeId_fkey")
  submission           submission             @relation(fields: [submissionId], references: [id], map: "Judging_submissionId_fkey")
  judgingcriteriascore judgingcriteriascore[]
  result               result[]

  @@index([contestId], map: "Judging_contestId_fkey")
  @@index([judgeId], map: "Judging_judgeId_fkey")
  @@index([submissionId], map: "Judging_submissionId_fkey")
}

model judgingcriteriascore {
  id                  Int                                 @id @default(autoincrement())
  judgingId           Int
  criteriaName        String
  criteriaDescription String?
  evaluationType      judgingcriteriascore_evaluationType
  weight              Int
  score               Float
  feedback            String?
  discreteValue       String?
  createdAt           DateTime                            @default(now())
  judging             judging                             @relation(fields: [judgingId], references: [id], map: "JudgingCriteriaScore_judgingId_fkey")

  @@index([judgingId], map: "JudgingCriteriaScore_judgingId_fkey")
}

model judgingtemplate {
  id                      Int                          @id @default(autoincrement())
  name                    String
  description             String?
  isDefault               Boolean                      @default(false)
  contestType             judgingtemplate_contestType?
  createdAt               DateTime                     @default(now())
  updatedAt               DateTime
  contest                 contest[]
  judgingtemplatecriteria judgingtemplatecriteria[]
}

model judgingtemplatecriteria {
  id                Int                                    @id @default(autoincrement())
  name              String
  description       String?
  needsJuryCourtesy Boolean                                @default(false)
  evaluationType    judgingtemplatecriteria_evaluationType
  weight            Int                                    @default(1)
  maxScore          Int?
  discreteValues    String?
  templateId        Int
  createdAt         DateTime                               @default(now())
  updatedAt         DateTime
  judgingtemplate   judgingtemplate                        @relation(fields: [templateId], references: [id], onDelete: Cascade, map: "JudgingTemplateCriteria_templateId_fkey")

  @@index([templateId], map: "JudgingTemplateCriteria_templateId_fkey")
}

model news {
  id          Int      @id @default(autoincrement())
  title       String
  slug        String   @unique(map: "News_slug_key")
  excerpt     String   @db.Text
  content     String   @db.LongText
  coverImage  String?
  date        DateTime @default(now())
  readTime    String?
  author      String?
  featured    Boolean  @default(false)
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  userId      Int
  user        user     @relation(fields: [userId], references: [id], map: "News_userId_fkey")

  @@index([userId], map: "News_userId_fkey")
}

model photogallery {
  id          Int      @id @default(autoincrement())
  title       String
  description String?  @db.Text
  coverPhoto  String?
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      Int
  user        user     @relation(fields: [userId], references: [id], map: "PhotoGallery_userId_fkey")
  photos      photo[]

  @@index([userId], map: "PhotoGallery_userId_fkey")
}

model photo {
  id          Int          @id @default(autoincrement())
  path        String // URL or path to the photo
  title       String?
  description String?      @db.Text
  sortOrder   Int          @default(0)
  galleryId   Int
  gallery     photogallery @relation(fields: [galleryId], references: [id], onDelete: Cascade)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@index([galleryId])
}

model notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  message   String
  createdAt DateTime @default(now())
  user      user     @relation(fields: [userId], references: [id], map: "Notification_userId_fkey")

  @@index([userId], map: "Notification_userId_fkey")
}

model referencedata {
  id          Int      @id @default(autoincrement())
  type        String
  code        String
  name        String
  description String?
  isActive    Boolean  @default(true)
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime

  @@unique([type, code], map: "ReferenceData_type_code_key")
}

model result {
  id           Int        @id @default(autoincrement())
  contestId    Int
  score        Float
  rank         Int?
  createdAt    DateTime   @default(now())
  judgingId    Int
  submissionId Int
  updatedAt    DateTime
  contest      contest    @relation(fields: [contestId], references: [id], map: "Result_contestId_fkey")
  judging      judging    @relation(fields: [judgingId], references: [id], map: "Result_judgingId_fkey")
  submission   submission @relation(fields: [submissionId], references: [id], map: "Result_submissionId_fkey")

  @@index([contestId], map: "Result_contestId_fkey")
  @@index([judgingId], map: "Result_judgingId_fkey")
  @@index([submissionId], map: "Result_submissionId_fkey")
}

model school {
  id           Int                @id @default(autoincrement())
  name         String
  ppd          String?
  code         String             @unique(map: "School_code_key")
  address      String?
  city         String?
  postcode     String?
  stateId      Int
  latitude     Float?
  longitude    Float?
  createdAt    DateTime           @default(now())
  category     String
  level        String
  contingent   contingent[]
  state        state              @relation(fields: [stateId], references: [id], map: "School_stateId_fkey")
  participants user_participant[]

  @@index([stateId], map: "School_stateId_fkey")
}

model state {
  id                Int                 @id @default(autoincrement())
  name              String              @unique(map: "State_name_key")
  zoneId            Int
  higherinstitution higherinstitution[]
  school            school[]
  events            event[]
  independents      independent[] // Relation to independent entities
  zone              zone                @relation(fields: [zoneId], references: [id], map: "State_zoneId_fkey")

  @@index([zoneId], map: "State_zoneId_fkey")
}

model submission {
  id            Int               @id @default(autoincrement())
  contestId     Int
  userId        Int?
  submittedAt   DateTime          @default(now())
  status        submission_status @default(PENDING)
  judging       judging[]
  metadata      Json?
  result        result[]
  contest       contest           @relation(fields: [contestId], references: [id], map: "Submission_contestId_fkey")
  user          user?             @relation(fields: [userId], references: [id], map: "Submission_userId_fkey")
  participantId Int?
  contestant    contestant?       @relation(fields: [contestantId], references: [id])
  contestantId  Int?
  participant   user_participant? @relation(fields: [participantId], references: [id])
  quiz_attempts quiz_attempt[] // Added for quiz contest submissions, onDelete: SetNull)

  @@index([contestId], map: "Submission_contestId_fkey")
  @@index([userId], map: "Submission_userId_fkey")
  @@index([participantId])
  @@index([contestantId])
}

model targetgroup {
  id          Int       @id @default(autoincrement())
  code        String    @unique(map: "TargetGroup_code_key")
  name        String
  ageGroup    String
  schoolLevel String
  maxAge      Int       @default(0)
  minAge      Int       @default(0)
  contest     contest[] @relation("contesttotargetgroup")
}

model theme {
  id          Int       @id @default(autoincrement())
  name        String    @unique(map: "Theme_name_key")
  color       String?
  logoPath    String?
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime
  contest     contest[]
}

model user {
  id             Int                 @id @default(autoincrement())
  name           String?
  email          String              @unique(map: "User_email_key")
  password       String?
  role           user_role           @default(ADMIN)
  username       String              @unique(map: "User_username_key")
  isActive       Boolean             @default(true)
  lastLogin      DateTime?
  createdAt      DateTime            @default(now())
  updatedAt      DateTime
  announcement   announcement[]
  judging        judging[]
  news           news[]
  notification   notification[]
  submission     submission[]
  photogalleries photogallery[]
  eventcontestjudges eventcontestjudge[] // Added relation to event contest judges
}

model user_participant {
  id           Int       @id @default(autoincrement())
  name         String
  email        String    @unique
  password     String?
  username     String    @unique
  ic           String? // IC number for Malaysian participants
  phoneNumber  String?
  gender       String?
  dateOfBirth  DateTime?
  schoolId     Int?
  higherInstId Int?
  isActive     Boolean   @default(true)
  lastLogin    DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  // Relations
  school             school?             @relation(fields: [schoolId], references: [id])
  higherInstitution  higherinstitution?  @relation(fields: [higherInstId], references: [id])
  contingents        contingent[]
  submissions        submission[]
  contingentRequests contingentRequest[]
  managedContingents contingentManager[] // Added relation to managed contingents
  teamManagers       teamManager[] // Relation to teams managed by this participant
  createdManagers    manager[] // Relation to independent managers created by this participant
}

model zone {
  id     Int     @id @default(autoincrement())
  name   String  @unique(map: "Zone_name_key")
  state  state[]
  events event[]
}

enum contest_contestType {
  QUIZ
  CODING
  STRUCTURE_BUILDING
  FASTEST_COMPLETION
  POSTER_PRESENTATION
  SCIENCE_PROJECT
  ENGINEERING_DESIGN
  ANALYSIS_CHALLENGE
}

enum judgingcriteriascore_evaluationType {
  POINTS
  TIME
  DISCRETE
}

enum judgingtemplate_contestType {
  QUIZ
  CODING
  STRUCTURE_BUILDING
  FASTEST_COMPLETION
  POSTER_PRESENTATION
  SCIENCE_PROJECT
  ENGINEERING_DESIGN
  ANALYSIS_CHALLENGE
}

enum judgingtemplatecriteria_evaluationType {
  POINTS
  TIME
  DISCRETE
}

enum submission_status {
  PENDING
  APPROVED
  REJECTED
}

enum user_role {
  ADMIN
  OPERATOR
  VIEWER
  PARTICIPANTS_MANAGER
  JUDGE
}

enum contest_method {
  ONLINE
  PHYSICAL
}

enum contest_judgingMethod {
  AI
  JURY
  POINT_SCORE
  TIME_COMPLETION
}

enum contest_participationMode {
  INDIVIDUAL
  TEAM
}

enum scope_area {
  NATIONAL
  ZONE
  STATE
  OPEN
}

// target_group model removed to avoid schema conflicts with existing targetgroup model

model question_bank {
  id              Int      @id @default(autoincrement())
  target_group    String // Target group name (e.g. PRIMARY, SECONDARY, HIGHER)
  knowledge_field String // E.g., general science, robotics, AI, physics, math, etc.
  question        String   @db.Text
  question_image  String? // URL to image if exists
  answer_type     String // single_selection, multiple_selection, binary
  answer_options  Json // JSON array of option objects
  answer_correct  String // Correct option(s) like "A" or "A,C" for multiple
  createdBy       String? // Username or email of creator (optional string instead of foreign key)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  quiz_questions quiz_question[] // Questions can be used in multiple quizzes

  @@index([knowledge_field])
  @@index([target_group]) // Keep index for performance
}

model quiz {
  id           Int       @id @default(autoincrement())
  target_group String // Target group name (e.g. PRIMARY, SECONDARY, HIGHER)
  quiz_name    String // Name/title of the quiz
  description  String?   @db.Text
  time_limit   Int? // Time limit in minutes, null for no limit
  publishedAt  DateTime? // When quiz was published
  status       String // created, published, retracted, ended
  createdBy    String? // Creator name or email (string instead of foreign key)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  contestId    Int? // Optional reference to contest if this quiz is part of a contest

  // Relations
  contest        contest?        @relation(fields: [contestId], references: [id])
  quiz_questions quiz_question[] // Questions assigned to this quiz
  quiz_attempts  quiz_attempt[]

  @@index([status])
  @@index([target_group]) // Keep index for performance
}

model quiz_question {
  id         Int @id @default(autoincrement())
  quizId     Int
  questionId Int
  order      Int // Order of question in the quiz
  points     Int @default(1) // Points for this question

  // Relations
  quiz     quiz          @relation(fields: [quizId], references: [id], onDelete: Cascade)
  question question_bank @relation(fields: [questionId], references: [id])

  @@unique([quizId, questionId]) // A question can only be assigned once to a quiz
  @@index([quizId])
  @@index([questionId])
}

model quiz_attempt {
  id           Int       @id @default(autoincrement())
  quizId       Int
  contestantId Int // Changed from participantId to contestantId
  status       String // started, completed, abandoned
  score        Int? // Total score earned
  start_time   DateTime
  end_time     DateTime?
  time_taken   Int? // Time taken in seconds
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  submissionId Int? // Reference to submission record if this attempt is part of a contest

  quiz       quiz          @relation(fields: [quizId], references: [id])
  contestant contestant    @relation(fields: [contestantId], references: [id])
  submission submission?   @relation(fields: [submissionId], references: [id])
  answers    quiz_answer[]

  @@index([contestantId])
  @@index([quizId])
  @@index([submissionId])
}

model quiz_answer {
  id               Int      @id @default(autoincrement())
  attemptId        Int
  questionId       Int // ID of the quiz_question
  selected_options Json // Array of selected option codes
  is_correct       Boolean
  points_earned    Int
  createdAt        DateTime @default(now())

  attempt quiz_attempt @relation(fields: [attemptId], references: [id], onDelete: Cascade)
}

model contingentRequest {
  id            Int      @id @default(autoincrement())
  contingentId  Int
  participantId Int
  status        String   @default("PENDING") // PENDING, APPROVED, REJECTED
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  contingent  contingent       @relation(fields: [contingentId], references: [id], onDelete: Cascade)
  participant user_participant @relation(fields: [participantId], references: [id])

  @@index([contingentId])
  @@index([participantId])
}

// Join table for many-to-many relationship between participants and contingents
model contingentManager {
  id            Int      @id @default(autoincrement())
  participantId Int // Changed from userId to participantId
  contingentId  Int
  isOwner       Boolean  @default(false) // Indicates if this participant is the primary owner of the contingent
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  participant user_participant @relation(fields: [participantId], references: [id], onDelete: Cascade) // Changed relation to user_participant
  contingent  contingent       @relation(fields: [contingentId], references: [id], onDelete: Cascade)

  @@unique([participantId, contingentId]) // Prevent duplicate manager entries
  @@index([participantId])
  @@index([contingentId])
}

model video {
  id                Int      @id @default(autoincrement())
  group_name        String // Category or group name for the video
  title             String
  video_description String?  @db.Text
  video_link        String // Google Drive file ID or full URL
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  isActive          Boolean  @default(true)
}

// Team model for contest participation
model team {
  id            Int      @id @default(autoincrement())
  name          String
  hashcode      String   @unique // Unique code for team identification
  description   String?  @db.Text
  team_email    String? // Team contact email
  evidence_doc  String? // Document reference or URL for submitted evidence
  evidence_submitteddate DateTime? // Date when evidence was submitted
  contestId     Int // Required contest association
  contingentId  Int // Required contingent association
  eventcontestId Int? // Link to the specific event contest
  status        String   @default("ACTIVE") // ACTIVE, INACTIVE, PENDING
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  maxMembers    Int      @default(4) // Maximum number of contestants in the team

  // Relations
  contest              contest       @relation(fields: [contestId], references: [id])
  contingent           contingent    @relation(fields: [contingentId], references: [id])
  eventcontest         eventcontest? @relation(fields: [eventcontestId], references: [id])
  members              teamMember[]
  managers             teamManager[]
  independentManagers  manager[]
  eventcontestteam     eventcontestteam[] // Team registrations for event contests

  @@index([contestId])
  @@index([contingentId])
  @@index([eventcontestId])
}

// Team manager model (initially limited to 1 manager per team)
model teamManager {
  id            Int      @id @default(autoincrement())
  teamId        Int
  participantId Int
  isOwner       Boolean  @default(true) // Indicates primary manager/owner
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  team        team             @relation(fields: [teamId], references: [id], onDelete: Cascade)
  participant user_participant @relation(fields: [participantId], references: [id])

  @@unique([teamId, participantId]) // Prevent duplicate manager entries
  @@index([teamId])
  @@index([participantId])
}

// Team member model for tracking contestants in teams
model teamMember {
  id           Int      @id @default(autoincrement())
  teamId       Int
  contestantId Int
  role         String? // Optional role within team
  joinedAt     DateTime @default(now())

  // Relations
  team       team       @relation(fields: [teamId], references: [id], onDelete: Cascade)
  contestant contestant @relation(fields: [contestantId], references: [id])

  @@unique([teamId, contestantId]) // Prevent duplicate member entries
  @@index([teamId])
  @@index([contestantId])
}

// Independent manager model (not tied to user or user_participant)
model manager {
  id          Int      @id @default(autoincrement())
  name        String
  ic          String // Malaysian IC number
  email       String? // Optional email address
  phoneNumber String? // Optional phone number
  hashcode    String   @unique // Unique identifier code
  teamId      Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   Int // ID of the user_participant who created this manager

  // Relations
  team    team?            @relation(fields: [teamId], references: [id])
  creator user_participant @relation(fields: [createdBy], references: [id])

  @@index([teamId])
  @@index([createdBy])
}
