generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model analytics {
  id        Int      @id @default(autoincrement())
  metric    String
  value     Float
  createdAt DateTime @default(now())
}

model announcement {
  id          Int      @id @default(autoincrement())
  title       String
  description String   @db.Text
  date        DateTime @default(now())
  icon        String?
  link        String?
  linkText    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  userId      Int
  user        user     @relation(fields: [userId], references: [id], map: "Announcement_userId_fkey")

  @@index([userId], map: "Announcement_userId_fkey")
}

model contest {
  id                 Int                       @id @default(autoincrement())
  name               String
  code               String                    @unique(map: "Contest_code_key")
  description        String?                   @db.Text
  contestType        contest_contestType
  method             contest_method
  judgingMethod      contest_judgingMethod
  participation_mode contest_participationMode @default(INDIVIDUAL)
  startDate          DateTime
  endDate            DateTime
  accessibility      Boolean                   @default(false)
  minAge             Int?
  maxAge             Int?
  createdAt          DateTime                  @default(now())
  updatedAt          DateTime                  @updatedAt
  themeId            Int?
  judgingTemplateId  Int?
  eventId            Int?
  maxMembersPerTeam  Int?                      @default(1)
  event              event?                    @relation("eventToContest", fields: [eventId], references: [id], map: "Contest_eventId_fkey")
  judgingtemplate    judgingtemplate?          @relation(fields: [judgingTemplateId], references: [id], map: "Contest_judgingTemplateId_fkey")
  theme              theme?                    @relation(fields: [themeId], references: [id], map: "Contest_themeId_fkey")
  contestants        contestParticipation[]
  eventcontests      eventcontest[]
  judging            judging[]
  quizzes            quiz[]
  result             result[]
  submission         submission[]
  teams              team[]
  targetgroup        targetgroup[]             @relation("contesttotargetgroup")

  @@index([judgingTemplateId], map: "Contest_judgingTemplateId_fkey")
  @@index([themeId], map: "Contest_themeId_fkey")
  @@index([eventId], map: "Contest_eventId_fkey")
}

model independent {
  id          Int          @id @default(autoincrement())
  name        String
  address     String?
  town        String?
  postcode    String?
  stateId     Int
  institution String?
  type        String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  contingents contingent[]
  state       state        @relation(fields: [stateId], references: [id])

  @@index([stateId])
}

model contingent {
  id                   Int                 @id @default(autoincrement())
  name                 String
  schoolId             Int?
  higherInstId         Int?
  createdAt            DateTime            @default(now())
  description          String?
  updatedAt            DateTime
  participantId        Int?
  managedByParticipant Boolean             @default(true)
  logoUrl              String?
  short_name           String?
  contingentType       String              @default("SCHOOL")
  independentId        Int?
  contestants          contestant[]
  school               school?             @relation(fields: [schoolId], references: [id], map: "Contingent_schoolId_fkey")
  higherInstitution    higherinstitution?  @relation(fields: [higherInstId], references: [id])
  independent          independent?        @relation(fields: [independentId], references: [id])
  participant          user_participant?   @relation(fields: [participantId], references: [id])
  managers             contingentManager[]
  requests             contingentRequest[]
  teams                team[]

  @@index([schoolId], map: "Contingent_schoolId_fkey")
  @@index([participantId])
  @@index([higherInstId])
  @@index([independentId])
}

model contestant {
  id                     Int                              @id @default(autoincrement())
  name                   String
  ic                     String?
  email                  String?
  phoneNumber            String?
  gender                 String
  birthdate              DateTime?
  age                    Int?
  edu_level              String
  class_grade            String?
  class_name             String?
  hashcode               String?                          @unique
  status                 String                           @default("ACTIVE")
  contingentId           Int
  createdAt              DateTime                         @default(now())
  updatedAt              DateTime                         @updatedAt
  createdById            Int?
  updatedById            Int?
  is_ppki                Boolean                          @default(false)
  contests               contestParticipation[]
  contingent             contingent                       @relation(fields: [contingentId], references: [id], onDelete: Cascade)
  quizAttempts           quiz_attempt[]
  submissions            submission[]
  surveyAnswers          survey_answer[]
  surveyCompositions     survey_contestants_composition[]
  surveySubmissionStatus survey_submission_status[]
  teamMembers            teamMember[]

  @@index([contingentId], map: "contestant_contingentId_fkey")
}

model contestParticipation {
  id           Int        @id @default(autoincrement())
  contestId    Int
  contestantId Int
  registeredAt DateTime   @default(now())
  status       String     @default("REGISTERED")
  notes        String?
  contest      contest    @relation(fields: [contestId], references: [id], onDelete: Cascade)
  contestant   contestant @relation(fields: [contestantId], references: [id], onDelete: Cascade)

  @@unique([contestId, contestantId])
  @@index([contestId])
  @@index([contestantId])
}

model event {
  id             Int                   @id @default(autoincrement())
  name           String
  scopeArea      scope_area            @default(OPEN)
  code           String                @unique(map: "Event_code_key")
  status         String                @default("OPEN") @db.VarChar(20)
  description    String?
  startDate      DateTime
  endDate        DateTime
  venue          String?
  address        String?
  city           String?
  addressState   String?
  zoneId         Int?
  stateId        Int?
  latitude       Float?
  longitude      Float?
  isActive       Boolean               @default(true)
  createdAt      DateTime              @default(now())
  updatedAt      DateTime              @updatedAt
  contests       contest[]             @relation("eventToContest")
  state          state?                @relation(fields: [stateId], references: [id])
  zone           zone?                 @relation(fields: [zoneId], references: [id])
  attendanceSync eventAttendanceSync[]
  eventcontests  eventcontest[]

  @@index([stateId], map: "event_stateId_fkey")
  @@index([zoneId], map: "event_zoneId_fkey")
}

model eventcontest {
  id                    Int                 @id @default(autoincrement())
  eventId               Int
  contestId             Int
  maxteampercontingent  Int                 @default(1)
  person_incharge       String?
  person_incharge_phone String?
  isActive              Boolean             @default(true)
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  contest               contest             @relation(fields: [contestId], references: [id], onDelete: Cascade)
  event                 event               @relation(fields: [eventId], references: [id], onDelete: Cascade)
  judges                eventcontestjudge[]
  eventcontestteam      eventcontestteam[]
  teams                 team[]

  @@unique([eventId, contestId])
  @@index([eventId])
  @@index([contestId])
}

model eventcontestteam {
  id             Int          @id @default(autoincrement())
  eventcontestId Int
  teamId         Int
  teamPriority   Int          @default(0)
  status         String       @default("PENDING")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt
  eventcontest   eventcontest @relation(fields: [eventcontestId], references: [id], onDelete: Cascade)
  team           team         @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@index([eventcontestId])
  @@index([eventcontestId, teamId], map: "eventcontestteam_eventcontest_team_idx")
  @@index([teamId])
}

model eventcontestjudge {
  id             Int          @id @default(autoincrement())
  eventcontestId Int
  userId         Int
  isChiefJudge   Boolean      @default(false)
  notes          String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  eventcontest   eventcontest @relation(fields: [eventcontestId], references: [id], onDelete: Cascade)
  user           user         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventcontestId, userId])
  @@index([eventcontestId])
  @@index([userId])
}

model eventcontesttoken {
  id         Int       @id @default(autoincrement())
  eventId    Int
  eventToken String    @db.VarChar(255)
  consumed   Boolean?  @default(false)
  createdAt  DateTime? @default(now()) @db.DateTime(0)
  updatedAt  DateTime? @updatedAt @db.DateTime(0)
  emailedTo  String?   @db.VarChar(255)

  @@index([eventId], map: "eventId")
  @@index([eventToken], map: "eventToken")
}

model higherinstitution {
  id           Int                @id @default(autoincrement())
  name         String
  code         String             @unique(map: "HigherInstitution_code_key")
  address      String?
  city         String?
  postcode     String?
  stateId      Int
  latitude     Float?
  longitude    Float?
  createdAt    DateTime           @default(now())
  contingents  contingent[]
  state        state              @relation(fields: [stateId], references: [id], map: "HigherInstitution_stateId_fkey")
  participants user_participant[]

  @@index([stateId], map: "HigherInstitution_stateId_fkey")
}

model judging {
  id                   Int                    @id @default(autoincrement())
  submissionId         Int
  score                Float
  feedback             String?
  contestId            Int
  judgingTime          DateTime               @default(now())
  judgeId              Int
  contest              contest                @relation(fields: [contestId], references: [id], map: "Judging_contestId_fkey")
  user                 user                   @relation(fields: [judgeId], references: [id], map: "Judging_judgeId_fkey")
  submission           submission             @relation(fields: [submissionId], references: [id], map: "Judging_submissionId_fkey")
  judgingcriteriascore judgingcriteriascore[]
  result               result[]

  @@index([contestId], map: "Judging_contestId_fkey")
  @@index([judgeId], map: "Judging_judgeId_fkey")
  @@index([submissionId], map: "Judging_submissionId_fkey")
}

model judgingcriteriascore {
  id                  Int                                 @id @default(autoincrement())
  judgingId           Int
  criteriaName        String
  criteriaDescription String?
  evaluationType      judgingcriteriascore_evaluationType
  weight              Int
  score               Float
  feedback            String?
  discreteValue       String?
  createdAt           DateTime                            @default(now())
  judging             judging                             @relation(fields: [judgingId], references: [id], map: "JudgingCriteriaScore_judgingId_fkey")

  @@index([judgingId], map: "JudgingCriteriaScore_judgingId_fkey")
}

model judgingtemplate {
  id                      Int                          @id @default(autoincrement())
  name                    String
  description             String?
  isDefault               Boolean                      @default(false)
  contestType             judgingtemplate_contestType?
  createdAt               DateTime                     @default(now())
  updatedAt               DateTime
  contest                 contest[]
  judgingtemplatecriteria judgingtemplatecriteria[]
}

model judgingtemplatecriteria {
  id                Int                                    @id @default(autoincrement())
  name              String
  description       String?
  needsJuryCourtesy Boolean                                @default(false)
  evaluationType    judgingtemplatecriteria_evaluationType
  weight            Int                                    @default(1)
  maxScore          Int?
  discreteValues    String?
  templateId        Int
  createdAt         DateTime                               @default(now())
  updatedAt         DateTime
  judgingtemplate   judgingtemplate                        @relation(fields: [templateId], references: [id], onDelete: Cascade, map: "JudgingTemplateCriteria_templateId_fkey")

  @@index([templateId], map: "JudgingTemplateCriteria_templateId_fkey")
}

model news {
  id          Int      @id @default(autoincrement())
  title       String
  slug        String   @unique(map: "News_slug_key")
  excerpt     String   @db.Text
  content     String   @db.LongText
  coverImage  String?
  date        DateTime @default(now())
  readTime    String?
  author      String?
  featured    Boolean  @default(false)
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime
  userId      Int
  user        user     @relation(fields: [userId], references: [id], map: "News_userId_fkey")

  @@index([userId], map: "News_userId_fkey")
}

model photogallery {
  id          Int      @id @default(autoincrement())
  title       String
  description String?  @db.Text
  coverPhoto  String?
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(dbgenerated("(now(3))"))
  updatedAt   DateTime @updatedAt
  userId      Int
  photos      photo[]
  user        user     @relation(fields: [userId], references: [id], map: "PhotoGallery_userId_fkey")

  @@index([userId], map: "PhotoGallery_userId_fkey")
}

model photo {
  id          Int          @id @default(autoincrement())
  path        String
  title       String?
  description String?      @db.Text
  sortOrder   Int          @default(0)
  galleryId   Int
  createdAt   DateTime     @default(dbgenerated("(now(3))"))
  updatedAt   DateTime     @updatedAt
  gallery     photogallery @relation(fields: [galleryId], references: [id], onDelete: Cascade)

  @@index([galleryId])
}

model notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  message   String
  createdAt DateTime @default(now())
  user      user     @relation(fields: [userId], references: [id], map: "Notification_userId_fkey")

  @@index([userId], map: "Notification_userId_fkey")
}

model referencedata {
  id          Int      @id @default(autoincrement())
  type        String
  code        String
  name        String
  description String?
  isActive    Boolean  @default(true)
  metadata    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime

  @@unique([type, code], map: "ReferenceData_type_code_key")
}

model result {
  id           Int        @id @default(autoincrement())
  contestId    Int
  score        Float
  rank         Int?
  createdAt    DateTime   @default(now())
  judgingId    Int
  submissionId Int
  updatedAt    DateTime
  contest      contest    @relation(fields: [contestId], references: [id], map: "Result_contestId_fkey")
  judging      judging    @relation(fields: [judgingId], references: [id], map: "Result_judgingId_fkey")
  submission   submission @relation(fields: [submissionId], references: [id], map: "Result_submissionId_fkey")

  @@index([contestId], map: "Result_contestId_fkey")
  @@index([judgingId], map: "Result_judgingId_fkey")
  @@index([submissionId], map: "Result_submissionId_fkey")
}

model school {
  id           Int                @id @default(autoincrement())
  name         String
  ppd          String?
  code         String             @unique(map: "School_code_key")
  address      String?            @db.Text
  city         String?
  postcode     String?
  stateId      Int
  latitude     Float?
  longitude    Float?
  createdAt    DateTime           @default(now())
  category     String
  level        String
  contingent   contingent[]
  state        state              @relation(fields: [stateId], references: [id], map: "School_stateId_fkey")
  participants user_participant[]

  @@index([stateId], map: "School_stateId_fkey")
}

model state {
  id                Int                 @id @default(autoincrement())
  name              String              @unique(map: "State_name_key")
  zoneId            Int
  events            event[]
  higherinstitution higherinstitution[]
  independents      independent[]
  school            school[]
  zone              zone                @relation(fields: [zoneId], references: [id], map: "State_zoneId_fkey")

  @@index([zoneId], map: "State_zoneId_fkey")
}

model submission {
  id            Int               @id @default(autoincrement())
  contestId     Int
  userId        Int?
  submittedAt   DateTime          @default(now())
  status        submission_status @default(PENDING)
  metadata      Json?
  participantId Int?
  contestantId  Int?
  judging       judging[]
  quiz_attempts quiz_attempt[]
  result        result[]
  contest       contest           @relation(fields: [contestId], references: [id], map: "Submission_contestId_fkey")
  user          user?             @relation(fields: [userId], references: [id], map: "Submission_userId_fkey")
  contestant    contestant?       @relation(fields: [contestantId], references: [id])
  participant   user_participant? @relation(fields: [participantId], references: [id])

  @@index([contestId], map: "Submission_contestId_fkey")
  @@index([userId], map: "Submission_userId_fkey")
  @@index([participantId])
  @@index([contestantId])
}

model targetgroup {
  id          Int       @id @default(autoincrement())
  code        String    @unique(map: "TargetGroup_code_key")
  name        String
  ageGroup    String
  schoolLevel String
  maxAge      Int       @default(0)
  minAge      Int       @default(0)
  contest     contest[] @relation("contesttotargetgroup")
}

model theme {
  id          Int       @id @default(autoincrement())
  name        String    @unique(map: "Theme_name_key")
  color       String?
  logoPath    String?
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime
  contest     contest[]
}

model user {
  id                 Int                 @id @default(autoincrement())
  name               String?
  email              String              @unique(map: "User_email_key")
  password           String?
  role               user_role           @default(ADMIN)
  username           String              @unique(map: "User_username_key")
  isActive           Boolean             @default(true)
  lastLogin          DateTime?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime
  announcement       announcement[]
  eventcontestjudges eventcontestjudge[]
  judging            judging[]
  news               news[]
  notification       notification[]
  photogalleries     photogallery[]
  submission         submission[]
}

model user_participant {
  id                 Int                 @id @default(autoincrement())
  name               String
  email              String              @unique
  password           String?
  username           String              @unique
  ic                 String?
  phoneNumber        String?
  gender             String?
  dateOfBirth        DateTime?
  schoolId           Int?
  higherInstId       Int?
  isActive           Boolean             @default(true)
  lastLogin          DateTime?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  contingents        contingent[]
  managedContingents contingentManager[]
  contingentRequests contingentRequest[]
  createdManagers    manager[]
  submissions        submission[]
  teamManagers       teamManager[]
  higherInstitution  higherinstitution?  @relation(fields: [higherInstId], references: [id])
  school             school?             @relation(fields: [schoolId], references: [id])

  @@index([higherInstId], map: "user_participant_higherInstId_fkey")
  @@index([schoolId], map: "user_participant_schoolId_fkey")
}

model zone {
  id     Int     @id @default(autoincrement())
  name   String  @unique(map: "Zone_name_key")
  events event[]
  state  state[]
}

model question_bank {
  id              Int             @id @default(autoincrement())
  target_group    String
  knowledge_field String
  question        String          @db.Text
  question_image  String?
  answer_type     String
  answer_options  Json
  answer_correct  String
  createdBy       String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  quiz_questions  quiz_question[]

  @@index([knowledge_field])
  @@index([target_group])
}

model quiz {
  id             Int             @id @default(autoincrement())
  target_group   String
  quiz_name      String
  description    String?         @db.Text
  time_limit     Int?
  publishedAt    DateTime?
  status         String
  createdBy      String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  contestId      Int?
  contest        contest?        @relation(fields: [contestId], references: [id])
  quiz_attempts  quiz_attempt[]
  quiz_questions quiz_question[]

  @@index([status])
  @@index([target_group])
  @@index([contestId], map: "quiz_contestId_fkey")
}

model quiz_question {
  id         Int           @id @default(autoincrement())
  quizId     Int
  questionId Int
  order      Int
  points     Int           @default(1)
  question   question_bank @relation(fields: [questionId], references: [id])
  quiz       quiz          @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@unique([quizId, questionId])
  @@index([quizId])
  @@index([questionId])
}

model quiz_attempt {
  id           Int           @id @default(autoincrement())
  quizId       Int
  contestantId Int
  status       String
  score        Int?
  start_time   DateTime
  end_time     DateTime?
  time_taken   Int?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  submissionId Int?
  answers      quiz_answer[]
  contestant   contestant    @relation(fields: [contestantId], references: [id])
  quiz         quiz          @relation(fields: [quizId], references: [id])
  submission   submission?   @relation(fields: [submissionId], references: [id])

  @@index([contestantId])
  @@index([quizId])
  @@index([submissionId])
}

model quiz_answer {
  id               Int          @id @default(autoincrement())
  attemptId        Int
  questionId       Int
  selected_options Json
  is_correct       Boolean
  points_earned    Int
  createdAt        DateTime     @default(now())
  attempt          quiz_attempt @relation(fields: [attemptId], references: [id], onDelete: Cascade)

  @@index([attemptId], map: "quiz_answer_attemptId_fkey")
}

model contingentRequest {
  id            Int              @id @default(autoincrement())
  contingentId  Int
  participantId Int
  status        String           @default("PENDING")
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  contingent    contingent       @relation(fields: [contingentId], references: [id], onDelete: Cascade)
  participant   user_participant @relation(fields: [participantId], references: [id])

  @@index([contingentId])
  @@index([participantId])
}

model contingentManager {
  id            Int              @id @default(autoincrement())
  participantId Int
  contingentId  Int
  isOwner       Boolean          @default(false)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  contingent    contingent       @relation(fields: [contingentId], references: [id], onDelete: Cascade)
  participant   user_participant @relation(fields: [participantId], references: [id], onDelete: Cascade)

  @@unique([participantId, contingentId])
  @@index([participantId])
  @@index([contingentId])
}

model video {
  id                Int      @id @default(autoincrement())
  group_name        String
  title             String
  video_description String?  @db.Text
  video_link        String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  isActive          Boolean  @default(true)
}

model team {
  id                     Int                @id @default(autoincrement())
  name                   String
  hashcode               String             @unique
  description            String?            @db.Text
  contestId              Int
  contingentId           Int
  status                 String             @default("ACTIVE")
  createdAt              DateTime           @default(now())
  updatedAt              DateTime           @updatedAt
  maxMembers             Int                @default(4)
  eventcontestId         Int?
  team_email             String?            @db.VarChar(255)
  evidence_doc           String?            @db.Text
  evidence_submitteddate DateTime?          @db.DateTime(0)
  eventcontestteam       eventcontestteam[]
  independentManagers    manager[]          @relation("SingleTeam")
  managerTeams           manager_team[]
  contest                contest            @relation(fields: [contestId], references: [id])
  contingent             contingent         @relation(fields: [contingentId], references: [id])
  eventcontest           eventcontest?      @relation(fields: [eventcontestId], references: [id])
  managers               teamManager[]
  members                teamMember[]

  @@index([contestId])
  @@index([contingentId])
  @@index([eventcontestId])
}

model teamManager {
  id            Int              @id @default(autoincrement())
  teamId        Int
  participantId Int
  isOwner       Boolean          @default(true)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  participant   user_participant @relation(fields: [participantId], references: [id])
  team          team             @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([teamId, participantId])
  @@index([teamId])
  @@index([participantId])
}

model teamMember {
  id           Int        @id @default(autoincrement())
  teamId       Int
  contestantId Int
  role         String?
  joinedAt     DateTime   @default(now())
  contestant   contestant @relation(fields: [contestantId], references: [id])
  team         team       @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([teamId, contestantId])
  @@index([teamId])
  @@index([contestantId])
}

model attendanceContingent {
  id               Int      @id @default(autoincrement())
  hashcode         String   @unique
  contingentId     Int
  eventId          Int
  attendanceDate   DateTime
  attendanceTime   DateTime
  attendanceStatus String   @default("Not Present")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now()) @updatedAt
  zoneId           Int?
  stateId          Int?
  state            String?  @db.VarChar(255)

  @@index([contingentId])
  @@index([eventId])
  @@index([stateId], map: "idx_stateId")
  @@index([zoneId], map: "idx_zoneId")
}

model attendanceTeam {
  Id               Int      @id @default(autoincrement())
  hashcode         String   @unique
  contingentId     Int
  teamId           Int
  eventId          Int
  attendanceDate   DateTime
  attendanceTime   DateTime
  attendanceStatus String   @default("Not Present")
  attendanceNote   String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  zoneId           Int?
  stateId          Int?
  state            String?  @db.VarChar(255)

  @@index([contingentId])
  @@index([eventId])
  @@index([teamId])
  @@index([stateId], map: "idx_stateId")
  @@index([zoneId], map: "idx_zoneId")
}

model attendanceContestant {
  id               Int      @id @default(autoincrement())
  hashcode         String   @unique
  participantId    Int
  contingentId     Int
  eventId          Int
  teamId           Int
  contestantId     Int
  attendanceDate   DateTime
  attendanceTime   DateTime
  attendanceStatus String   @default("Not Present")
  attendanceNote   String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now()) @updatedAt
  ic               String?  @db.VarChar(255)
  zoneId           Int?
  stateId          Int?
  state            String?  @db.VarChar(255)
  contestGroup     String?  @db.VarChar(255)
  contestId        Int?
  contestName      String?  @db.VarChar(255)

  @@index([contingentId])
  @@index([eventId])
  @@index([teamId])
  @@index([contestantId])
  @@index([stateId], map: "idx_stateId")
  @@index([zoneId], map: "idx_zoneId")
}

model attendanceManager {
  id               Int      @id @default(autoincrement())
  hashcode         String   @unique
  eventId          Int
  contingentId     Int
  managerId        Int
  attendanceDate   DateTime
  attendanceTime   DateTime
  attendanceStatus String   @default("Not Present")
  attendanceNote   String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now()) @updatedAt
  zoneId           Int?
  stateId          Int?
  state            String?  @db.VarChar(255)
  contestGroup     String?  @db.VarChar(255)
  email            String?  @db.VarChar(255)
  email_status     String?  @db.VarChar(50)

  @@unique([contingentId, eventId, managerId], name: "unique_contingent_event_manager", map: "unique_contingent_event_manager")
  @@index([contingentId], map: "contingentId_index")
  @@index([eventId], map: "eventId_index")
  @@index([managerId], map: "managerId_index")
  @@index([stateId], map: "stateId_index")
  @@index([zoneId], map: "zoneId_index")
}

model attendanceNonParticipant {
  id               Int      @id @default(autoincrement())
  hashcode         String   @unique
  category         String   @default("")
  eventId          Int
  name             String
  organization     String?
  email            String?
  phoneNumber      String?
  attendanceDate   DateTime
  attendanceTime   DateTime
  attendanceStatus String   @default("Not Present")
  attendanceNote   String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now()) @updatedAt
  zoneId           Int?
  stateId          Int?
  state            String?  @db.VarChar(255)

  @@index([eventId], map: "idx_eventId")
  @@index([stateId], map: "idx_stateId")
  @@index([zoneId], map: "idx_zoneId")
}

model eventsection {
  id                 Int      @id @default(autoincrement())
  eventId            Int
  contestId          Int
  sectionName        String
  sectionCode        String
  sectionDescription String?
  sectionStatus      String   @default("Active")
  sectionType        String   @default("Manual")
  sectionNote        String?
  sectionPIC         String?
  sectionPICPhone    String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @default(now()) @updatedAt
}

model manager {
  id          Int              @id @default(autoincrement())
  name        String
  ic          String
  hashcode    String           @unique
  teamId      Int?
  createdAt   DateTime         @default(dbgenerated("(now(3))"))
  updatedAt   DateTime         @updatedAt
  createdBy   Int
  email       String?
  phoneNumber String?
  creator     user_participant @relation(fields: [createdBy], references: [id])
  team        team?            @relation("SingleTeam", fields: [teamId], references: [id])
  teams       manager_team[]

  @@index([teamId])
  @@index([createdBy])
}

model manager_team {
  id        Int      @id @default(autoincrement())
  managerId Int
  teamId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  manager   manager  @relation(fields: [managerId], references: [id], onDelete: Cascade)
  team      team     @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@unique([managerId, teamId])
  @@index([managerId])
  @@index([teamId])
}

model survey {
  id                     Int                              @id @default(autoincrement())
  name                   String
  description            String?                          @db.Text
  status                 String                           @default("draft")
  startDate              DateTime?
  endDate                DateTime?
  createdAt              DateTime                         @default(now())
  updatedAt              DateTime                         @updatedAt
  answers                survey_answer[]
  contestantsComposition survey_contestants_composition[]
  questions              survey_question[]
  submissionStatus       survey_submission_status[]

  @@index([status])
}

model survey_question {
  id           Int             @id @default(autoincrement())
  surveyId     Int
  question     String          @db.Text
  questionType String          @default("text")
  options      Json?
  isRequired   Boolean         @default(true)
  displayOrder Int             @default(0)
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  answers      survey_answer[]
  survey       survey          @relation(fields: [surveyId], references: [id], onDelete: Cascade)

  @@index([surveyId])
  @@index([surveyId, displayOrder])
}

model survey_contestants_composition {
  id           Int        @id @default(autoincrement())
  surveyId     Int
  contestantId Int
  contestant   contestant @relation(fields: [contestantId], references: [id], onDelete: Cascade)
  survey       survey     @relation(fields: [surveyId], references: [id], onDelete: Cascade)

  @@unique([surveyId, contestantId])
  @@index([surveyId])
  @@index([contestantId])
}

model attendance_endpoint {
  id           Int      @id @default(autoincrement())
  eventId      Int
  endpointhash String   @unique
  passcode     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model attendanceagent_endpoint {
  id           Int      @id @default(autoincrement())
  eventId      Int
  endpointhash String   @unique
  passcode     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
}

model survey_answer {
  id           Int             @id @default(autoincrement())
  surveyId     Int
  questionId   Int
  contestantId Int
  answer       Json?
  submittedAt  DateTime        @default(now())
  contestant   contestant      @relation(fields: [contestantId], references: [id], onDelete: Cascade)
  question     survey_question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  survey       survey          @relation(fields: [surveyId], references: [id], onDelete: Cascade)

  @@index([surveyId])
  @@index([questionId])
  @@index([contestantId])
  @@index([surveyId, contestantId])
}

model survey_submission_status {
  id            Int        @id @default(autoincrement())
  surveyId      Int
  contestantId  Int
  status        String     @default("not_started")
  startedAt     DateTime?
  completedAt   DateTime?
  lastUpdatedAt DateTime   @default(now())
  contestant    contestant @relation(fields: [contestantId], references: [id], onDelete: Cascade)
  survey        survey     @relation(fields: [surveyId], references: [id], onDelete: Cascade)

  @@unique([surveyId, contestantId])
  @@index([surveyId])
  @@index([contestantId])
  @@index([status])
}

model email_template {
  id                     Int              @id @default(autoincrement())
  template_name          String
  title                  String
  content                String           @db.Text
  subject                String
  notes                  String?          @db.Text
  delivery_type          String           @default("MANUAL")
  scheduled_datetime     DateTime?
  created_at             DateTime         @default(now())
  updated_at             DateTime         @updatedAt
  created_by             Int?
  is_active              Boolean          @default(true)
  category               String?
  available_placeholders String?          @db.Text
  campaigns              email_campaign[]
  outgoing_emails        email_outgoing[]
}

model email_outgoing {
  id               Int              @id @default(autoincrement())
  template_id      Int?
  recipient_email  String
  subject          String
  content          String           @db.Text
  delivery_status  String           @default("PENDING")
  is_delivered     Boolean          @default(false)
  is_read          Boolean          @default(false)
  sent_at          DateTime?
  read_at          DateTime?
  error_message    String?          @db.Text
  tracking_id      String?          @unique
  created_at       DateTime         @default(now())
  campaign_id      Int?
  click_count      Int              @default(0)
  first_clicked_at DateTime?
  first_opened_at  DateTime?
  last_clicked_at  DateTime?
  last_opened_at   DateTime?
  open_count       Int              @default(0)
  recipient_id     Int?             @unique
  campaign         email_campaign?  @relation(fields: [campaign_id], references: [id])
  recipient        email_recipient? @relation("recipient_to_outgoing", fields: [recipient_id], references: [id])
  template         email_template?  @relation(fields: [template_id], references: [id])

  @@index([campaign_id])
  @@index([template_id])
  @@index([tracking_id])
}

model email_campaign {
  id                 Int               @id @default(autoincrement())
  campaign_name      String
  description        String?           @db.Text
  status             String            @default("DRAFT")
  template_id        Int?
  created_at         DateTime          @default(now())
  updated_at         DateTime          @updatedAt
  scheduled_datetime DateTime?
  completed_datetime DateTime?
  created_by         Int?
  total_recipients   Int               @default(0)
  successful_sends   Int               @default(0)
  failed_sends       Int               @default(0)
  open_count         Int               @default(0)
  click_count        Int               @default(0)
  template           email_template?   @relation(fields: [template_id], references: [id])
  outgoing_emails    email_outgoing[]
  recipients         email_recipient[]

  @@index([template_id])
}

model email_recipient {
  id             Int             @id @default(autoincrement())
  campaign_id    Int
  email          String
  name           String?
  source         String          @default("MANUAL")
  source_id      Int?
  status         String          @default("PENDING")
  placeholders   Json?
  sent_at        DateTime?
  opened_at      DateTime?
  clicked_at     DateTime?
  outgoing_email email_outgoing? @relation("recipient_to_outgoing")
  campaign       email_campaign  @relation(fields: [campaign_id], references: [id], onDelete: Cascade)

  @@index([campaign_id])
  @@index([email])
}

model eventAttendanceSync {
  id               Int       @id @default(autoincrement())
  eventId          Int
  status           String
  startTime        DateTime  @default(now())
  endTime          DateTime?
  totalContingents Int
  totalTeams       Int
  completedCount   Int       @default(0)
  errorCount       Int       @default(0)
  note             String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  event            event     @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@index([eventId])
}

enum contest_contestType {
  QUIZ
  CODING
  STRUCTURE_BUILDING
  FASTEST_COMPLETION
  POSTER_PRESENTATION
  SCIENCE_PROJECT
  ENGINEERING_DESIGN
  ANALYSIS_CHALLENGE
}

enum judgingcriteriascore_evaluationType {
  POINTS
  TIME
  DISCRETE
}

enum judgingtemplate_contestType {
  QUIZ
  CODING
  STRUCTURE_BUILDING
  FASTEST_COMPLETION
  POSTER_PRESENTATION
  SCIENCE_PROJECT
  ENGINEERING_DESIGN
  ANALYSIS_CHALLENGE
}

enum judgingtemplatecriteria_evaluationType {
  POINTS
  TIME
  DISCRETE
}

enum submission_status {
  PENDING
  APPROVED
  REJECTED
}

enum user_role {
  ADMIN
  OPERATOR
  VIEWER
  PARTICIPANTS_MANAGER
  JUDGE
}

enum contest_method {
  ONLINE
  PHYSICAL
}

enum contest_judgingMethod {
  AI
  JURY
  POINT_SCORE
  TIME_COMPLETION
}

enum contest_participationMode {
  INDIVIDUAL
  TEAM
}

enum scope_area {
  NATIONAL
  ZONE
  STATE
  OPEN
  DISTRICT
}
