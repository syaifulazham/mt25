// New models for email campaign/project system

model email_campaign {
  id                   Int                   @id @default(autoincrement())
  campaign_name        String
  description          String?               @db.Text
  status               String                @default("DRAFT") // DRAFT, SCHEDULED, IN_PROGRESS, COMPLETED, CANCELLED
  template_id          Int?
  created_at           DateTime              @default(now())
  updated_at           DateTime              @updatedAt
  scheduled_datetime   DateTime?
  completed_datetime   DateTime?
  created_by           Int?
  total_recipients     Int                   @default(0)
  successful_sends     Int                   @default(0)
  failed_sends         Int                   @default(0)
  open_count           Int                   @default(0)
  click_count          Int                   @default(0)
  
  // Relations
  template             email_template?       @relation(fields: [template_id], references: [id])
  recipients           email_recipient[]
  outgoing_emails      email_outgoing[]
  
  @@map("email_campaign")
}

model email_recipient {
  id                   Int                   @id @default(autoincrement())
  campaign_id          Int
  email                String
  name                 String?
  source               String                @default("MANUAL") // CSV, PARTICIPANT, MANAGER, MANUAL
  source_id            Int?                 // ID from the source table if applicable
  status               String                @default("PENDING") // PENDING, SENT, FAILED, BOUNCED
  placeholders         Json?                 // JSON object with placeholders for this recipient
  sent_at              DateTime?
  opened_at            DateTime?
  clicked_at           DateTime?
  
  // Relations
  campaign             email_campaign        @relation(fields: [campaign_id], references: [id])
  outgoing_email       email_outgoing?
  
  @@map("email_recipient")
  @@index([campaign_id])
  @@index([email])
}

// Update existing email_outgoing model to link to campaigns and recipients
model email_outgoing {
  id                   Int                   @id @default(autoincrement())
  campaign_id          Int?
  recipient_id         Int?                  @unique // One recipient can have only one outgoing email per campaign
  template_id          Int?
  to_email             String
  from_email           String?
  subject              String
  content              String                @db.Text
  status               String                @default("PENDING") // PENDING, SENT, FAILED, BOUNCED
  sent_at              DateTime?
  error_message        String?               @db.Text
  tracking_id          String?               @unique // Unique ID for tracking opens and clicks
  open_count           Int                   @default(0)
  click_count          Int                   @default(0)
  first_opened_at      DateTime?
  last_opened_at       DateTime?
  first_clicked_at     DateTime?
  last_clicked_at      DateTime?
  
  // Relations
  campaign             email_campaign?       @relation(fields: [campaign_id], references: [id])
  template             email_template?       @relation(fields: [template_id], references: [id])
  recipient            email_recipient?      @relation(fields: [recipient_id], references: [id])
  
  @@map("email_outgoing")
  @@index([campaign_id])
  @@index([template_id])
  @@index([tracking_id])
}

// Update existing email_template model to include relation to campaigns
model email_template {
  // Existing fields remain unchanged
  
  // Add relations
  campaigns            email_campaign[]
  outgoing_emails      email_outgoing[]
}

// Certificate Template System

enum Status {
  ACTIVE
  INACTIVE
}

model CertTemplate {
  id              Int       @id @default(autoincrement())
  templateName    String    @db.VarChar(255)
  basePdfPath     String?   @db.VarChar(1000)
  configuration   Json      // Stores canvas config, elements, and other template data
  status          Status    @default(ACTIVE)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  createdBy       Int       // User ID who created the template
  updatedBy       Int?      // User ID who last updated the template
  
  // Relations to user table
  creator         user      @relation("CreatedTemplates", fields: [createdBy], references: [id])
  updater         user?     @relation("UpdatedTemplates", fields: [updatedBy], references: [id])
  
  // Generated certificates using this template
  certificates    Certificate[]
  
  @@index([templateName])
  @@index([status])
  @@index([createdAt])
  @@map("cert_template")
}

model Certificate {
  id              Int       @id @default(autoincrement())
  templateId      Int       // Reference to the template used
  recipientName   String    @db.VarChar(255)
  recipientEmail  String?   @db.VarChar(255)
  recipientType   String    @db.VarChar(50) // PARTICIPANT, CONTESTANT, JUDGE, ORGANIZER
  contestName     String?   @db.VarChar(255)
  awardTitle      String?   @db.VarChar(255)
  uniqueCode      String    @unique @db.VarChar(50)
  filePath        String?   @db.VarChar(1000)
  status          String    @default("DRAFT") @db.VarChar(20) // DRAFT, GENERATED, SENT, DOWNLOADED
  issuedAt        DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  createdBy       Int       // User ID who created the certificate
  
  // Relations
  template        CertTemplate @relation(fields: [templateId], references: [id])
  creator         user        @relation("CreatedCertificates", fields: [createdBy], references: [id])
  
  @@index([templateId])
  @@index([recipientName])
  @@index([recipientEmail])
  @@index([status])
  @@index([createdAt])
  @@map("certificate")
}
